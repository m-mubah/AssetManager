@page "/departments"
@attribute [Authorize(Roles = InfrastructureConstants.Identity.Roles.Administrator)]

@using AssetManager.Infrastructure;
@using AssetManager.Core.DTO.Staff
@using AssetManager.Core.Services.Staffs

@inject IDepartmentService departmentService
@inject IDialogService Dialog
@inject ISnackbar Snackbar


<MudContainer Class="mt-4">
    <MudToolBar>
        <MudText Typo="@Typo.h4">Departments</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled"
                   Size="Size.Large"
                   StartIcon="@Icons.Material.Outlined.Add"
                   IconColor="Color.Success"
                   OnClick="@OpenNewDepartmentDialog">
            New Department
        </MudButton>
    </MudToolBar>

    <MudTable class="mt-5 ml-5 mb-5 mr-5" Elevation="5" Items="@departments" Hover="true">

        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Department Head</MudTh>
            <MudTh>Number of Staff</MudTh>
            <MudTh>Number of Assigned Assets</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Name">@context.DepartmentName</MudTd>
            <MudTd DataLabel="Department Head">@context.DepartmentHead</MudTd>
            <MudTd DataLabel="Status">@context.NumOfStaff</MudTd>
            <MudTd DataLabel="Purchased Date">@context.NumOfAssignedAssets</MudTd>
            <MudTd>
                <MudBlazor.MudIcon Icon="@Icons.Filled.Edit" class="action-btn" @onclick="() => OpenEditDepartmentDialog(context.Id)" />
                <MudBlazor.MudIcon Icon="@Icons.Filled.Delete" class="action-btn" @onclick="() => Delete(context.Id)" />
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>

    </MudTable>

</MudContainer>

@code {
    private IList<GetDepartmentsDTO> departments = new List<GetDepartmentsDTO>();

    protected override async Task OnInitializedAsync()
    {
        departments = await departmentService.GetDepartmentsTableAsync();
    }

    private async void OpenNewDepartmentDialog()
    {
        var newDepartmentDialog = Dialog.Show<_NewDepartmentForm>("New Department", new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true });
        var result = await newDepartmentDialog.Result;

        if (!result.Cancelled)
        {
            departments.Clear();
            departments = await departmentService.GetDepartmentsTableAsync();
        }
        this.StateHasChanged();
    }

    private async void OpenEditDepartmentDialog(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("departmentId", id);

        var editDepartmentDialog = Dialog.Show<_EditDepartmentForm>("Edit Department", parameters, new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true });
        var result = await editDepartmentDialog.Result;

        if (!result.Cancelled)
        {
            departments.Clear();
            departments = await departmentService.GetDepartmentsTableAsync();
        }
        this.StateHasChanged();
    }

    private async void Delete(int departmentId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this department? This process cannot be undone." +
            "WARNING: THIS WILL DELETE ALL STAFF IN THIS DEPARTMENT!");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = Dialog.Show<Dialog>("Delete", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            Snackbar.Add("Department deleted successfully!", Severity.Warning);
            await departmentService.DeleteAsync(departmentId);
            departments.Clear();
            departments = await departmentService.GetDepartmentsTableAsync();
        }
        this.StateHasChanged();
    }
}